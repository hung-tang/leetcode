package main

import (
	"fmt"
	"math"
	"strconv"
)

/*
 * @lc app=leetcode id=91 lang=golang
 *
 * [91] Decode Ways
 */
func numDecodings(s string) int {
	if len(s) == 0 {
		return 0
	}
	dp := make(map[int]int)
	dfs2(s, 0, &dp)
	return dp[0]
}

func dfs2(s string, start int, dp *map[int]int) int {
	if start == len(s) {
		return 1
	}
	cached, found := (*dp)[start]
	if found {
		return cached
	}
	res := 0
	for i := start; i < int(math.Min(float64(len(s)), float64(start+2))); i++ {
		digitStr := string(s[start : i+1])
		if string(digitStr[0]) == "0" { // needed because Atoi will covert "01" to "1"
			(*dp)[start] = 0
			return 0
		}
		digitInt, error := strconv.Atoi(digitStr)
		if error != nil {
			fmt.Println("Can not be converted to int")
			return 0
		}
		if digitInt >= 1 && digitInt <= 9 {
			res += dfs2(s, i+1, dp)
		} else if digitInt >= 10 && digitInt <= 26 {
			res += dfs2(s, i+1, dp)
		}
	}
	(*dp)[start] = res
	return res
}

/* func main() {
	fmt.Println(numDecodings("12"))
	fmt.Println(numDecodings("226"))
	fmt.Println(numDecodings("123456"))
	fmt.Println(numDecodings("01"))
	fmt.Println(numDecodings
} */
